{"version":3,"file":"static/js/97.bed4a54b.chunk.js","mappings":"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","sources":["components/LoadingComponent/index.jsx","pages/QuizPage/TakeQuizPage/Timer.jsx","services/quizHistory.service.js","pages/QuizPage/TakeQuizPage/index.jsx","services/axios.default.js","services/quiz.service.js"],"sourcesContent":["import React from 'react';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { ClockLoader } from 'react-spinners';\r\nimport { colors } from '~/constants';\r\nconst LoadingComponent = () => {\r\n    return (\r\n        <div className=\"w-full h-screen relative\">\r\n            <ClockLoader color={colors.primary} size={100} className=\"absolute mx-auto top-1/2 -translate-y-full\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoadingComponent;\r\n","import React, { memo } from 'react';\r\nimport { useTimer } from 'react-timer-hook';\r\nconst Timer = ({ setIsTimeout }) => {\r\n    const endTime = new Date();\r\n    endTime.setHours(endTime.getHours() + 12);\r\n    const { seconds, minutes, hours } = useTimer({\r\n        expiryTimestamp: endTime,\r\n        onExpire: () => setIsTimeout(true),\r\n    });\r\n    return (\r\n        <p className=\"text-xl font-bold text-primary\">\r\n            {hours.toString().padStart(2, '0')}\r\n            <span className=\"mx-2\">:</span>\r\n            {minutes.toString().padStart(2, '0')}\r\n            <span className=\"mx-2\">:</span>\r\n            {seconds.toString().padStart(2, '0')}\r\n        </p>\r\n    );\r\n};\r\nexport default memo(Timer);\r\n","import axiosCredentials from './axios.credential';\r\n\r\nexport const saveQuizHistory = async (data) => {\r\n    try {\r\n        const { score, quizId, answerChoices } = data;\r\n        if (!score || !quizId || !answerChoices) throw 'Lỗi';\r\n        const res = await axiosCredentials.post('/quiz-history', JSON.stringify(data));\r\n        if (res.status === 200) return res?.data?.data;\r\n    } catch (err) {\r\n        throw new Error(err?.response?.data?.message || 'Có lỗi xảy ra');\r\n    }\r\n};\r\n\r\nexport const getMyExamHistory = async (data) => {\r\n    try {\r\n        const { score, quizId, answerChoices } = data;\r\n        if (!score || !quizId || !answerChoices) throw 'Lỗi';\r\n        const res = await axiosCredentials.get('/quiz-history/mine');\r\n        if (res.status === 200) return res?.data?.message;\r\n    } catch (err) {\r\n        throw new Error(err?.response?.data?.message || 'Có lỗi xảy ra');\r\n    }\r\n};\r\n","import { message, Select } from 'antd';\r\nimport React, { createContext, useContext, useEffect, useLayoutEffect, useReducer, useState } from 'react';\r\nimport { Link, useNavigate, useParams } from 'react-router-dom';\r\nimport Lottie from 'lottie-react';\r\nimport congratsAnimation from '~/asset/animations/congratulations-2.json';\r\nimport Aos from 'aos';\r\nimport 'aos/dist/aos.css';\r\n//component\r\nimport * as QuizService from '~/services/quiz.service';\r\nimport Timer from './Timer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBookOpen } from '@fortawesome/free-solid-svg-icons';\r\nimport { questionTypeContent } from '~/constants';\r\nimport HTMLReactParser from 'html-react-parser';\r\nimport LoadingComponent from '~/components/LoadingComponent';\r\nimport router from '~/config';\r\nimport { useQuery } from '@tanstack/react-query';\r\nimport useMutationHooks from '~/hooks/useMutationHooks';\r\nimport * as QuizHistoryService from '~/services/quizHistory.service';\r\n\r\n//end\r\n\r\nconst TakeQuizContext = createContext();\r\nconst ANSWER_CHOICE_ACTION = {\r\n    ADD_ANSWER_QUESTION_TYPE_1: 'addAnswerQuestionType1',\r\n    ADD_ANSWER_QUESTION_TYPE_2: 'addAnswerQuestionType2',\r\n};\r\nconst answerChoiceReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case ANSWER_CHOICE_ACTION.ADD_ANSWER_QUESTION_TYPE_1: {\r\n            return {\r\n                ...state,\r\n                [action.payload.currentPartIndex]: {\r\n                    ...state[action.payload.currentPartIndex],\r\n                    [action.payload.currentQuestionIndex]: {\r\n                        chooseIndex: action.payload.chooseIndex,\r\n                        isCorrect: action.payload.isCorrect,\r\n                    },\r\n                },\r\n            };\r\n        }\r\n        case ANSWER_CHOICE_ACTION.ADD_ANSWER_QUESTION_TYPE_2: {\r\n            const { currentPartIndex, currentQuestionIndex, chooseIndex, isCorrect } = action.payload;\r\n            if (\r\n                currentPartIndex !== undefined &&\r\n                currentQuestionIndex !== undefined &&\r\n                chooseIndex !== undefined &&\r\n                isCorrect !== undefined\r\n            ) {\r\n                const choices = { ...state };\r\n                // khi choices[currentPartIndex] là undefined thì phải set là một đối tượng không thì\r\n                // kiểm tra choices[currentPartIndex][currentQuestionIndex] sẽ là đang truy cập đến thuộc tính của undefined nên lỗi\r\n                // và đang là kiểm tra questionType = 1 nên sẽ kiểm tra là mảng\r\n                if (typeof choices[currentPartIndex] === 'undefined') choices[currentPartIndex] = {};\r\n                if (Array.isArray(choices[currentPartIndex][currentQuestionIndex])) {\r\n                    // nếu câu hỏi vừa chọn có trong answer choice rồi thì return\r\n                    if (\r\n                        choices[currentPartIndex][currentQuestionIndex].some(\r\n                            (choice) => choice.chooseIndex === chooseIndex,\r\n                        )\r\n                    ) {\r\n                        return state;\r\n                    }\r\n                    choices[currentPartIndex] = {\r\n                        ...choices[currentPartIndex],\r\n                        [currentQuestionIndex]: [\r\n                            ...choices[currentPartIndex][currentQuestionIndex],\r\n                            {\r\n                                chooseIndex: chooseIndex,\r\n                                isCorrect: isCorrect,\r\n                            },\r\n                        ],\r\n                    };\r\n                } else {\r\n                    choices[currentPartIndex] = {\r\n                        ...choices[currentPartIndex],\r\n                        [currentQuestionIndex]: [\r\n                            {\r\n                                chooseIndex: chooseIndex,\r\n                                isCorrect: isCorrect,\r\n                            },\r\n                        ],\r\n                    };\r\n                }\r\n                return choices;\r\n            }\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nconst checkQuestionCorrectQuestionType2 = (\r\n    quizDetail,\r\n    answerChoices,\r\n    currentQuestionType,\r\n    currentPartIndex,\r\n    currentQuestionIndex,\r\n) => {\r\n    if (\r\n        typeof quizDetail === 'undefined' &&\r\n        typeof answerChoices === 'undefined' &&\r\n        typeof currentQuestionType === 'undefined' &&\r\n        typeof currentPartIndex === 'undefined' &&\r\n        typeof currentQuestionIndex === 'undefined'\r\n    )\r\n        return;\r\n    if (quizDetail.quiz && currentQuestionType === 2 && currentPartIndex in answerChoices) {\r\n        if (currentQuestionIndex in answerChoices[currentPartIndex]) {\r\n            const quiz = quizDetail.quiz;\r\n            if (quiz[currentPartIndex].questions[currentQuestionIndex]) {\r\n                const answers = quiz[currentPartIndex].questions[currentQuestionIndex].answers; // quiz detail\r\n                const choices = answerChoices[currentPartIndex][currentQuestionIndex]; //answer choices\r\n                if (Array.isArray(answers) && Array.isArray(choices)) {\r\n                    let countAnswerCorrectInQuizDetail = 0;\r\n                    answers.forEach((answer) => {\r\n                        if (answer.isCorrect) return countAnswerCorrectInQuizDetail++;\r\n                    }, 0);\r\n                    let countAnswerCorrectInAnswerChoices = 0;\r\n                    choices.forEach((choice) => {\r\n                        if (choice.isCorrect) return countAnswerCorrectInAnswerChoices++;\r\n                    }, 0);\r\n                    const everyCorrect = choices.every((choice) => choice.isCorrect === true);\r\n                    if (countAnswerCorrectInQuizDetail === countAnswerCorrectInAnswerChoices && everyCorrect) {\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\nconst countCorrectAnswerQuizDetail = (question) => {\r\n    if (!(question.answers.length > 0)) return 0;\r\n    let count = 0;\r\n    question.answers.forEach((answer) => {\r\n        if (answer?.isCorrect) count++;\r\n    });\r\n    return count;\r\n};\r\nconst calculateScore = (answerChoices, countQuestionQuizDetail, quizDetail) => {\r\n    if (typeof answerChoices === 'object' && typeof quizDetail === 'object' && quizDetail?.quiz?.length > 0) {\r\n        let countCorrectAnswer = 0;\r\n        //vào part\r\n        Object.entries(answerChoices).forEach(([keyPart, value]) => {\r\n            // entries trả về mảng, mảng đó lại chứa các mảng [key,value]\r\n            if (typeof value === 'object') {\r\n                //vào question và lấy được giá trị bằng value\r\n                Object.entries(value).forEach(([keyQuestion, valueQuestion]) => {\r\n                    if (\r\n                        Array.isArray(valueQuestion) &&\r\n                        countCorrectAnswerQuizDetail(quizDetail.quiz[keyPart].questions[keyQuestion]) ===\r\n                            valueQuestion.length\r\n                    ) {\r\n                        if (valueQuestion.every((answer) => answer.isCorrect === true)) {\r\n                            countCorrectAnswer++;\r\n                        }\r\n                    }\r\n                    if (typeof valueQuestion === 'object') {\r\n                        if (valueQuestion.isCorrect) {\r\n                            countCorrectAnswer++;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        return Math.ceil((countCorrectAnswer / countQuestionQuizDetail) * 10);\r\n    }\r\n};\r\nconst TakeQuizProvider = ({ children }) => {\r\n    const { slug } = useParams();\r\n    //region GET QUIZ DETAIL BY SLUG\r\n    const queryQuizDetail = useQuery({\r\n        queryKey: ['QueryQuizDetail', slug],\r\n        queryFn: () => QuizService.getQuizForExamBySlug(slug),\r\n    });\r\n    const [timePass, setTimePass] = useState(2000);\r\n    const [isEnded, setIsEnded] = useState(false);\r\n    const [isTimeout, setIsTimeout] = useState(false);\r\n    const [currentPartIndex, setCurrentPartIndex] = useState(0);\r\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n    const [answerChoices, dispatchAnswerChoices] = useReducer(answerChoiceReducer, {});\r\n    const [currentQuestionType, setCurrentQuestionType] = useState(null);\r\n    const [countAnswerChoices, setCountAnswerChoices] = useState(0);\r\n    const [countQuestionQuizDetail, setCountQuestionQuizDetail] = useState(0);\r\n\r\n    // set cho current question type khi vào bài thi và đếm số câu hỏi trong bài\r\n    useEffect(() => {\r\n        if (!queryQuizDetail?.data) return;\r\n        if (queryQuizDetail.data.quiz) {\r\n            if (queryQuizDetail.data?.quiz[currentQuestionIndex]?.questions[currentQuestionIndex])\r\n                setCurrentQuestionType(\r\n                    queryQuizDetail.data?.quiz[currentQuestionIndex]?.questions[currentQuestionIndex]?.questionType ??\r\n                        1,\r\n                );\r\n            if (Array.isArray(queryQuizDetail.data.quiz)) {\r\n                setCountQuestionQuizDetail(() => {\r\n                    return queryQuizDetail.data.quiz.reduce((accumulator, partDetail) => {\r\n                        return (accumulator += partDetail.questions.length);\r\n                    }, 0);\r\n                });\r\n            }\r\n        }\r\n    }, [queryQuizDetail.data]);\r\n    //Đếm tất cả số câu hỏi trong câu trả lời (answer choices)\r\n    useEffect(() => {\r\n        if (answerChoices) {\r\n            let count = 0;\r\n            Object.entries(answerChoices).forEach(([keyOfPart, valueOfPart]) => {\r\n                if (typeof valueOfPart === 'object') {\r\n                    Object.entries(valueOfPart).forEach(() => {\r\n                        count++;\r\n                    });\r\n                }\r\n            });\r\n            setCountAnswerChoices(count);\r\n        }\r\n    }, [answerChoices]);\r\n    //\r\n\r\n    //Khi get có lỗi\r\n    useEffect(() => {\r\n        if (queryQuizDetail.isError) {\r\n            message.error(queryQuizDetail.error.message);\r\n        }\r\n    }, [queryQuizDetail.isError]);\r\n    //Set currentQuestionType khi thay đổi câu hỏi\r\n    useEffect(() => {\r\n        if (queryQuizDetail.data) {\r\n            const quiz = queryQuizDetail.data.quiz;\r\n            if (quiz) {\r\n                if (quiz[currentPartIndex]?.questions[currentQuestionIndex]) {\r\n                    setCurrentQuestionType(quiz[currentPartIndex].questions[currentQuestionIndex].questionType);\r\n                }\r\n                if (currentQuestionIndex === quiz[currentPartIndex].questions.length) {\r\n                    if (currentPartIndex === quiz.length - 1) return;\r\n                    setCurrentPartIndex(currentPartIndex + 1);\r\n                    setCurrentQuestionIndex(0);\r\n                }\r\n            }\r\n        }\r\n    }, [currentQuestionIndex]);\r\n    useEffect(() => {\r\n        if (queryQuizDetail?.data) {\r\n            const quiz = queryQuizDetail?.data?.quiz;\r\n            if (quiz) {\r\n                if (quiz[currentPartIndex]?.questions[currentQuestionIndex]) {\r\n                    setCurrentQuestionType(quiz[currentPartIndex].questions[currentQuestionIndex].questionType);\r\n                }\r\n            }\r\n        }\r\n        setCurrentQuestionIndex(0);\r\n    }, [currentPartIndex]);\r\n    //END\r\n    return (\r\n        <TakeQuizContext.Provider\r\n            value={{\r\n                slug,\r\n                quizDetail: queryQuizDetail.data,\r\n                timePass,\r\n                setTimePass,\r\n                isEnded,\r\n                setIsEnded,\r\n                isTimeout,\r\n                setIsTimeout,\r\n                currentPartIndex,\r\n                setCurrentPartIndex,\r\n                currentQuestionIndex,\r\n                setCurrentQuestionIndex,\r\n                answerChoices,\r\n                dispatchAnswerChoices,\r\n                currentQuestionType,\r\n                countAnswerChoices,\r\n                countQuestionQuizDetail,\r\n            }}\r\n        >\r\n            {queryQuizDetail.isLoading ? <LoadingComponent /> : <>{children}</>}\r\n        </TakeQuizContext.Provider>\r\n    );\r\n};\r\n//region phần bên trái của trang (hiển thị thông tin cơ bản bài thi)\r\nconst TakeQuizInfo = () => {\r\n    const navigate = useNavigate();\r\n    const {\r\n        quizDetail,\r\n        setIsEnded,\r\n        setIsTimeout,\r\n        timePass,\r\n        setTimePass,\r\n        currentPartIndex,\r\n        setCurrentPartIndex,\r\n        answerChoices,\r\n    } = useContext(TakeQuizContext);\r\n    const handleChangePartIndex = (partIndex) => {\r\n        if (partIndex === currentPartIndex) return;\r\n        setCurrentPartIndex(partIndex);\r\n    };\r\n    const handleBack = () => {\r\n        navigate(-1);\r\n    };\r\n    return (\r\n        <div className=\"flex flex-col w-full lg:max-w-72 gap-6\">\r\n            <div className=\"px-4 py-2 bg-white rounded shadow\">\r\n                <div className=\"border-b border-gray-300 font-medium py-2\">\r\n                    <p className=\"text-lg\">{quizDetail?.name}</p>\r\n                    <p className=\"font-normal mt-2\">\r\n                        Chế độ:<span className=\"font-bold ml-1\">Ôn thi</span>\r\n                    </p>\r\n                </div>\r\n                <div className=\"border-b border-gray-300 py-2\">\r\n                    <p>Thời gian làm bài</p>\r\n                    <Timer setIsTimeout={setIsTimeout} />\r\n                </div>\r\n                <div className=\"pt-2\">\r\n                    <p className=\"font-medium pb-1 text-sm\">Tự động chuyển câu sau</p>\r\n                    <Select\r\n                        onChange={(e) => {\r\n                            setTimePass(e);\r\n                        }}\r\n                        defaultValue={timePass}\r\n                        className=\"w-full md:w-1/2 mt-2\"\r\n                    >\r\n                        <Select.Option value={1000}>1s</Select.Option>\r\n                        <Select.Option value={2000}>2s</Select.Option>\r\n                        <Select.Option value={3000}>3s</Select.Option>\r\n                        <Select.Option value={4000}>4s</Select.Option>\r\n                    </Select>\r\n                </div>\r\n                <div className=\"flex mt-3 gap-3\">\r\n                    <button\r\n                        className=\"bg-red-500 block rounded-md px-3 py-1  duration-300 hover:opacity-65\"\r\n                        onClick={handleBack}\r\n                    >\r\n                        <p className=\"text-center text-white\">Trở về</p>\r\n                    </button>\r\n                    <button\r\n                        className=\"bg-yellow-500 block rounded-md px-3 py-1 duration-300 hover:opacity-65\"\r\n                        onClick={() => setIsEnded(true)}\r\n                    >\r\n                        <p className=\"text-center text-white\">Kết thúc</p>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"px-4 py-2 bg-white rounded shadow\">\r\n                <p className=\"font-medium mb-4\">Danh sách phần thi ({quizDetail?.quiz?.length})</p>\r\n                {quizDetail?.quiz.map((part, index) => (\r\n                    <button\r\n                        key={index}\r\n                        onClick={() => handleChangePartIndex(index)}\r\n                        className={`w-full px-4 py-2 items-center rounded-sm flex justify-between opacity-95 duration-300 ease-linear ${\r\n                            currentPartIndex === index\r\n                                ? 'bg-blue-100 cursor-default'\r\n                                : 'cursor-pointer hover:opacity-45 hover:bg-blue-100'\r\n                        }`}\r\n                    >\r\n                        <div className=\"flex items-center\">\r\n                            <div\r\n                                className={`w-7 h-7 flex items-center justify-center flex-wrap rounded-full ${\r\n                                    currentPartIndex === index ? 'bg-pink-600' : ''\r\n                                }`}\r\n                            >\r\n                                {currentPartIndex === index && (\r\n                                    <FontAwesomeIcon className={`text-white text-sm`} icon={faBookOpen} />\r\n                                )}\r\n                            </div>\r\n                            <span className=\"ml-3\">{part?.partName}</span>\r\n                        </div>\r\n                        <div className=\"text-blue-500 font-medium text-right\">\r\n                            {index in answerChoices ? <>{Object.keys(answerChoices[index]).length}</> : 0}/\r\n                            {quizDetail?.quiz[index]?.questions?.length}\r\n                        </div>\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n// region Choose answers\r\n// Phần  giữa (chọn đáp án)\r\nconst ChooseAnswer = () => {\r\n    const {\r\n        quizDetail,\r\n        currentQuestionIndex,\r\n        setCurrentQuestionIndex,\r\n        currentPartIndex,\r\n        answerChoices,\r\n        dispatchAnswerChoices,\r\n        timePass,\r\n        currentQuestionType,\r\n    } = useContext(TakeQuizContext);\r\n    //hàm chuyển câu hỏi (tăng current question index)\r\n    const NextQuestion = () => {\r\n        const timeoutId = setTimeout(() => {\r\n            if (quizDetail && typeof currentPartIndex === 'number' && typeof currentQuestionIndex === 'number') {\r\n                if (quizDetail.quiz) {\r\n                    const quiz = quizDetail.quiz;\r\n                    // kiểm tra xem có phải câu cuối cùng khong\r\n                    if (\r\n                        currentQuestionIndex === quiz[currentPartIndex].questions.length - 1 &&\r\n                        currentPartIndex === quiz.length - 1\r\n                    )\r\n                        return;\r\n                    setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n                }\r\n            }\r\n        }, timePass ?? 2000);\r\n        return () => clearTimeout(timeoutId);\r\n    };\r\n    // CHOOSE ANSWER HANDLING\r\n    const handleChooseAnswer = (chooseIndex) => {\r\n        // nếu không có current part index trong answer choice rồi thì xuống thực hiện code phía dưới\r\n        // nếu có thì check xem có curent question index trong answer choice chưa nếu có thì return vì đã trả lời rồi thì không được làm lại nữa\r\n        if (currentQuestionType == 1 && answerChoices[currentPartIndex])\r\n            if (currentQuestionIndex in answerChoices[currentPartIndex]) return;\r\n        if (currentQuestionType == 1) {\r\n            dispatchAnswerChoices({\r\n                type: ANSWER_CHOICE_ACTION.ADD_ANSWER_QUESTION_TYPE_1,\r\n                payload: {\r\n                    currentPartIndex,\r\n                    currentQuestionIndex,\r\n                    chooseIndex: chooseIndex,\r\n                    isCorrect:\r\n                        quizDetail?.quiz[currentPartIndex]?.questions[currentQuestionIndex]?.answers[chooseIndex]\r\n                            ?.isCorrect,\r\n                },\r\n            });\r\n            NextQuestion();\r\n        } else if (currentQuestionType == 2) {\r\n            dispatchAnswerChoices({\r\n                type: ANSWER_CHOICE_ACTION.ADD_ANSWER_QUESTION_TYPE_2,\r\n                payload: {\r\n                    currentPartIndex,\r\n                    currentQuestionIndex,\r\n                    chooseIndex: chooseIndex,\r\n                    isCorrect:\r\n                        quizDetail?.quiz[currentPartIndex]?.questions[currentQuestionIndex]?.answers[chooseIndex]\r\n                            ?.isCorrect,\r\n                },\r\n            });\r\n        }\r\n    };\r\n    //kiểm tra xem câu có question type = 2 đã đúng chưa, so sánh xem đáp án đúng trong quiz detail và answer choice câu hỏi hiện tại có bằng nhau không\r\n    useEffect(() => {\r\n        if (currentQuestionType !== 2) return;\r\n        if (\r\n            checkQuestionCorrectQuestionType2(\r\n                quizDetail,\r\n                answerChoices,\r\n                currentQuestionType,\r\n                currentPartIndex,\r\n                currentQuestionIndex,\r\n            )\r\n        )\r\n            NextQuestion();\r\n        // ngược lại nếu chọn đủ các câu thì next\r\n        else if (currentPartIndex in answerChoices && quizDetail?.quiz) {\r\n            if (\r\n                currentQuestionIndex in answerChoices[currentPartIndex] &&\r\n                quizDetail?.quiz[currentPartIndex]?.questions\r\n            ) {\r\n                if (!Array.isArray(quizDetail?.quiz[currentPartIndex]?.questions[currentQuestionIndex]?.answers))\r\n                    return;\r\n                const lengthAnswersCurrent =\r\n                    quizDetail?.quiz[currentPartIndex]?.questions[currentQuestionIndex]?.answers?.length;\r\n                const lengthAnswerChoicesCurrent = answerChoices[currentPartIndex][currentQuestionIndex]?.length;\r\n                if (lengthAnswersCurrent === lengthAnswerChoicesCurrent) {\r\n                    NextQuestion();\r\n                }\r\n            }\r\n        }\r\n    }, [answerChoices]);\r\n    // lặp mảng khi question type = 2 thì lấy ra choose index trong mảng answerChoices của câu hỏi hiện tại,\r\n    // return về true hoặc false nếu đáp án render ở dưới có index === đáp án được chọn trong answerChoices[currentPartIndex][currentQuestionIndex]\r\n    const handleGetIsCorrectAnswer = (indexInRenderAnswer) => {\r\n        if (currentQuestionType == 2 && currentPartIndex in answerChoices) {\r\n            const choices = answerChoices[currentPartIndex][currentQuestionIndex];\r\n            if (Array.isArray(choices)) {\r\n                // tìm xem trong answer choice có index render không? nếu có thì return về isCorrect của nó\r\n                const foundChoice = choices.find((choice) => choice.chooseIndex === indexInRenderAnswer);\r\n                return foundChoice ? foundChoice.isCorrect : null;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    const handleGetChooseIndexAnswer = (indexInRenderAnswer) => {\r\n        if (currentQuestionType === 1 && currentPartIndex in answerChoices) {\r\n            if (currentQuestionIndex in answerChoices[currentPartIndex]) {\r\n                if (answerChoices[currentPartIndex][currentQuestionIndex].chooseIndex === indexInRenderAnswer)\r\n                    return true;\r\n            }\r\n        }\r\n        if (currentQuestionType === 2 && currentPartIndex in answerChoices) {\r\n            const choices = answerChoices[currentPartIndex][currentQuestionIndex];\r\n            if (Array.isArray(choices)) {\r\n                // tìm xem trong answer choice có index render không? nếu có thì return về isCorrect của nó\r\n                const foundChoice = choices.find((choice) => choice.chooseIndex == indexInRenderAnswer);\r\n                return foundChoice ? true : false;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    // AOS EFFECT\r\n    useEffect(() => {\r\n        Aos.init({ duration: 1000, easing: 'linear' });\r\n    }, []);\r\n    useEffect(() => {\r\n        Aos.refresh();\r\n    }, [currentPartIndex, currentQuestionIndex]);\r\n    // END\r\n    return (\r\n        <div className=\"px-2 py-2 flex-1 bg-white rounded shadow\" key={currentQuestionIndex} data-aos=\"flip-left\">\r\n            {quizDetail?.quiz[currentPartIndex] && (\r\n                <>\r\n                    {quizDetail.quiz[currentPartIndex].questions instanceof Array && (\r\n                        <>\r\n                            {quizDetail.quiz[currentPartIndex].questions[currentQuestionIndex] && (\r\n                                <>\r\n                                    <div className=\"flex justify-between items-center\">\r\n                                        <p>Câu {currentQuestionIndex + 1}</p>\r\n                                        <p className=\"text-sm text-gray-500\">\r\n                                            {/*lấy kiểu câu hỏi - Một đáp án or nhiều đáp án*/}\r\n                                            {questionTypeContent[currentQuestionType]}\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"my-2 font-medium\">\r\n                                        {/* Hiển thị nội dung câu hỏi */}\r\n                                        {HTMLReactParser(\r\n                                            quizDetail.quiz[currentPartIndex].questions[currentQuestionIndex]\r\n                                                .questionContent,\r\n                                        )}\r\n                                    </div>\r\n                                    <div className=\"flex flex-col gap-5\">\r\n                                        {/* Render các câu trả lời và chọn */}\r\n                                        {quizDetail.quiz[currentPartIndex].questions[currentQuestionIndex]\r\n                                            .answers instanceof Array && (\r\n                                            <>\r\n                                                {quizDetail.quiz[currentPartIndex].questions[\r\n                                                    currentQuestionIndex\r\n                                                ].answers.map((answer, index) => (\r\n                                                    <label\r\n                                                        key={index}\r\n                                                        className=\"flex items-center select-none space-x-2 cursor-pointer\"\r\n                                                    >\r\n                                                        {/* Kiểm tra xem kiểu câu hỏi hiện tại là gì (hàm set ở trên provider)*/}\r\n                                                        <input\r\n                                                            type={currentQuestionType == 1 ? 'radio' : 'checkbox'}\r\n                                                            onChange={() => handleChooseAnswer(index)}\r\n                                                            checked={handleGetChooseIndexAnswer(index)}\r\n                                                            className=\"w-5 h-5\"\r\n                                                        />\r\n                                                        {/* Đây là render bằng mảng nên để tránh việc chưa trả lời mà đáp án đã tích thì phải đủ điều kiện\r\n                                                        chỉ số phần thi hiện tại ở trong answerChoice(provider) và có thằng đáp án hiện tại sau khi chọn\r\n                                                        tiếp theo thêm điều kiện đáp án đúng của câu hỏi\r\n\r\n                                                        Khi trả lời sai thì tất render màu đỏ bằng cách chỉ số câu trả lời khi render và chỉ số câu trả lời đã lưu trong anserchoice phải bằng nhau\r\n                                                        thứ 2 trong answerChoice isCorrect phải bằng false\r\n                                                        */}\r\n                                                        <div\r\n                                                            className={\r\n                                                                currentQuestionType == 1\r\n                                                                    ? `${\r\n                                                                          currentPartIndex in answerChoices &&\r\n                                                                          answerChoices[currentPartIndex][\r\n                                                                              currentQuestionIndex\r\n                                                                          ] &&\r\n                                                                          answer.isCorrect &&\r\n                                                                          '!bg-green-700 text-white'\r\n                                                                      } ${\r\n                                                                          currentPartIndex in answerChoices &&\r\n                                                                          answerChoices[currentPartIndex][\r\n                                                                              currentQuestionIndex\r\n                                                                          ]?.isCorrect === false &&\r\n                                                                          answerChoices[currentPartIndex][\r\n                                                                              currentQuestionIndex\r\n                                                                          ]?.chooseIndex === index &&\r\n                                                                          '!bg-red-600 text-white'\r\n                                                                      } px-2`\r\n                                                                    : `${\r\n                                                                          handleGetIsCorrectAnswer(index) === true &&\r\n                                                                          '!bg-green-700 text-white'\r\n                                                                      }\r\n                                                                      ${\r\n                                                                          handleGetIsCorrectAnswer(index) === false &&\r\n                                                                          '!bg-red-600 text-white'\r\n                                                                      }\r\n                                                                      `\r\n                                                            }\r\n                                                        >\r\n                                                            {HTMLReactParser(answer.content)}\r\n                                                        </div>\r\n                                                    </label>\r\n                                                ))}\r\n                                            </>\r\n                                        )}\r\n                                    </div>\r\n                                </>\r\n                            )}\r\n                        </>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n// region table of question\r\n//Phàn bên phải chọn câu hỏi\r\nconst TableOfQuestion = () => {\r\n    const {\r\n        quizDetail,\r\n        currentPartIndex,\r\n        answerChoices,\r\n        currentQuestionIndex,\r\n        setCurrentQuestionIndex,\r\n        currentQuestionType,\r\n    } = useContext(TakeQuizContext);\r\n    return (\r\n        <div className=\"px-2 py-2 bg-white rounded shadow max-w80 min-w-72\">\r\n            <div className=\"mb-2 flex flex-row justify-between\">\r\n                <p>Mục lục câu hỏi</p>\r\n                <p className=\"text-sm\">{questionTypeContent[currentQuestionType]}</p>\r\n            </div>\r\n            <div className=\"flex flex-wrap gap-3\">\r\n                {quizDetail?.quiz[currentPartIndex]?.questions.map((question, index) => (\r\n                    <button\r\n                        key={index}\r\n                        onClick={() => setCurrentQuestionIndex(index)}\r\n                        className={`${\r\n                            question.questionType === 1 &&\r\n                            currentPartIndex in answerChoices &&\r\n                            answerChoices[currentPartIndex][index]?.isCorrect === true &&\r\n                            'bg-green-700 border-green-700 text-white'\r\n                        } ${\r\n                            question.questionType === 1 &&\r\n                            currentPartIndex in answerChoices &&\r\n                            currentQuestionIndex !== index &&\r\n                            answerChoices[currentPartIndex][index]?.isCorrect === false &&\r\n                            'bg-red-600 border-red-600 text-white'\r\n                        } \r\n                        ${\r\n                            currentQuestionIndex !== index &&\r\n                            question.questionType === 2 &&\r\n                            checkQuestionCorrectQuestionType2(quizDetail, answerChoices, 2, currentPartIndex, index) ===\r\n                                true &&\r\n                            'bg-green-700 border-green-700 text-white'\r\n                        }\r\n                        ${\r\n                            currentQuestionIndex !== index &&\r\n                            question.questionType === 2 &&\r\n                            checkQuestionCorrectQuestionType2(quizDetail, answerChoices, 2, currentPartIndex, index) ===\r\n                                false &&\r\n                            'bg-red-600 border-red-600 text-white'\r\n                        }\r\n                        ${\r\n                            currentQuestionIndex === index ? 'border-primary bg-primary text-white' : 'border-gray-300'\r\n                        } border-2 rounded-lg min-w-10 h-10 font-medium`}\r\n                    >\r\n                        {Number(index + 1)}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nconst TakeQuizPageMain = () => {\r\n    const { quizDetail, answerChoices, isEnded, isTimeout, countQuestionQuizDetail } = useContext(TakeQuizContext);\r\n    const [score, setScore] = useState(0);\r\n    const handleSaveTakeQuizHistory = useMutationHooks((data) => QuizHistoryService.saveQuizHistory(data));\r\n    useEffect(() => {\r\n        if (isTimeout) {\r\n            message.warning('Bạn đã hết giờ làm bài');\r\n        }\r\n        if (isEnded || isTimeout) {\r\n            const score = calculateScore(answerChoices, countQuestionQuizDetail, quizDetail) || 0;\r\n            setScore(score);\r\n            handleSaveTakeQuizHistory.mutate({\r\n                quizId: quizDetail.id,\r\n                score: score,\r\n                answerChoices,\r\n            });\r\n        }\r\n        if (!answerChoices || !score || !quizDetail.id) return;\r\n    }, [isEnded, isTimeout]);\r\n    return (\r\n        <div className=\"w-full h-full flex justify-center items-center\">\r\n            {!handleSaveTakeQuizHistory.isPending ? (\r\n                <>\r\n                    {!isEnded ? (\r\n                        <div className=\"flex w-full flex-col-reverse lg:flex-row gap-3 lg:items-start\">\r\n                            {quizDetail?.quiz && (\r\n                                <>\r\n                                    <TakeQuizInfo />\r\n                                    <ChooseAnswer />\r\n                                    <TableOfQuestion />\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"absolute inset-0 w-full bg-black bg-opacity-65 overflow-hidden min-h-96 px-5 py-5 md:px-10 md:py-10 flex justify-center items-start\">\r\n                            <div className=\"relative text-black w-full md:w-2/3 bg-white rounded-md px-5 pt-10 pb-24 md:pb-20 flex justify-center flex-col items-center\">\r\n                                <h4 className=\"\">Điểm của bạn là:</h4>\r\n                                <p className=\"text-9xl my-5 font-semibold text-primary\">{score}</p>\r\n                                <Link\r\n                                    to={router.discover}\r\n                                    className=\"bg-primary text-3xl px-3 py-3 mt-6 md:px-2 md:py-2 md:mt-4 z-20 absolute text-white font-bold md:text-lg rounded-md bottom-5\"\r\n                                >\r\n                                    OK\r\n                                </Link>\r\n                            </div>\r\n                            <Lottie\r\n                                className=\"w-full md:w-2/3 absolute bottom-60 md:-bottom-24 z-10\"\r\n                                animationData={congratsAnimation}\r\n                            />\r\n                        </div>\r\n                    )}\r\n                </>\r\n            ) : (\r\n                <LoadingComponent />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\nconst TakeQuizPage = () => {\r\n    return (\r\n        <TakeQuizProvider>\r\n            <TakeQuizPageMain />\r\n        </TakeQuizProvider>\r\n    );\r\n};\r\nexport default TakeQuizPage;\r\n","import axios from 'axios';\r\n\r\nconst axiosApplicationJson = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\nexport default axiosApplicationJson;\r\n","import { message } from 'antd';\r\nimport axiosCredentials from './axios.credential';\r\nimport axiosApplicationJson from './axios.default';\r\n\r\nconst delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\r\nexport const getQuizzes = async () => {\r\n    try {\r\n        const res = await axiosCredentials.get(`/quiz/getQuizzes`);\r\n        if (res.status === 200 && res.data) {\r\n            await delay(2000);\r\n            return res.data.data ?? []; // data 1 là của axios còn data sau là của mình viết api trả về\r\n        }\r\n    } catch (err) {\r\n        if (err.response) {\r\n            throw new Error(err.response?.data);\r\n        }\r\n    }\r\n};\r\nexport const getQuizDetail = async (id) => {\r\n    try {\r\n        const res = await axiosCredentials.get(`/quiz/getQuizDetail?id=${id}`);\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data; // data 1 là của axios còn data sau là của mình viết api trả về\r\n        }\r\n        return {};\r\n    } catch (err) {\r\n        if (err.response) throw new Error(err.response.data);\r\n    }\r\n};\r\nexport const createQuiz = async (data) => {\r\n    try {\r\n        const { name, description, school, subject, topic, schoolYear, educationLevel, thumb } = data;\r\n\r\n        const res = await axiosCredentials.post(\r\n            `/quiz/create`,\r\n            JSON.stringify({\r\n                name,\r\n                description,\r\n                school,\r\n                subject,\r\n                topic,\r\n                schoolYear,\r\n                educationLevel,\r\n                thumb,\r\n            }),\r\n        );\r\n        // cấu hình để mslugdleware có thể xác thực được thông tin là đã đăng nhập bằng access token\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data;\r\n        }\r\n        return {};\r\n    } catch (err) {\r\n        if (err.response) {\r\n            throw new Error(err.response.data);\r\n        }\r\n    }\r\n};\r\nexport const createQuestion = async (data) => {\r\n    try {\r\n        const { id, partName, questionType, questionContent, answers } = data;\r\n        const res = await axiosCredentials.put(\r\n            `/quiz/createQuestion`,\r\n            JSON.stringify({\r\n                id,\r\n                partName,\r\n                questionType,\r\n                questionContent,\r\n                answers,\r\n            }),\r\n        );\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data;\r\n        }\r\n        return {};\r\n    } catch (err) {\r\n        if (err.response) {\r\n            // Xử lý lỗi từ phản hồi HTTP\r\n            message.error(err.response.data);\r\n            throw new Error(err.response.data); // Ném lỗi để xử lý ở nơi gọi hàm login\r\n        }\r\n    }\r\n};\r\nexport const updateQuizGeneralInfo = async (data) => {\r\n    try {\r\n        const res = await axiosCredentials.put(`/quiz/updateQuizGeneralInfo`, JSON.stringify(data));\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data;\r\n        }\r\n        return {};\r\n    } catch (err) {\r\n        // console.log(err);\r\n        if (err.response) {\r\n            message.error(err.response.data);\r\n            throw new Error(err.response.data);\r\n        }\r\n    }\r\n};\r\nexport const updateQuizQuestion = async (data) => {\r\n    try {\r\n        const res = await axiosCredentials.put(`/quiz/updateQuizQuestion`, JSON.stringify(data));\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data;\r\n        }\r\n        return res;\r\n    } catch (err) {\r\n        if (err.response) {\r\n            console.log(err.response);\r\n            throw new Error(err.response.data);\r\n        }\r\n    }\r\n};\r\nexport const getQuizPreviewBySlug = async (slug) => {\r\n    try {\r\n        if (!slug) {\r\n            throw new Error('Lỗi');\r\n        }\r\n        const res = await axiosApplicationJson.get(`/quiz/getQuizPreview/${slug}`);\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data; // data 1 là của axios còn data sau là của mình viết api trả về\r\n        }\r\n        return {};\r\n    } catch (err) {\r\n        throw new Error(err.response.data);\r\n    }\r\n};\r\nexport const getQuizForExamBySlug = async (slug) => {\r\n    try {\r\n        if (!slug) {\r\n            throw new Error('Lỗi');\r\n        }\r\n        const res = await axiosCredentials.get(`/quiz/getQuizForExam/${slug}`);\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data; // data 1 là của axios còn data sau là của mình viết api trả về\r\n        }\r\n        return {};\r\n    } catch (err) {\r\n        throw new Error(err.response.data);\r\n    }\r\n};\r\nexport const deleteQuiz = async (data) => {\r\n    try {\r\n        const { id } = data;\r\n        if (!id) {\r\n            throw new Error('Có lỗi trong quá trình xóa');\r\n        }\r\n        const res = await axiosCredentials.delete(`/quiz/deleteQuiz/${id}`);\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data;\r\n        }\r\n        return {};\r\n    } catch (err) {\r\n        if (err.response) {\r\n            throw new Error(err.response.data);\r\n        }\r\n    }\r\n};\r\nexport const getDiscoveryQuizzes = async (data) => {\r\n    try {\r\n        const { name, page, limit, subject, topic, schoolYear, educationLevel } = data;\r\n        const params = new URLSearchParams();\r\n        Object.entries({ name, page, limit, subject, topic, schoolYear, educationLevel }).forEach(([key, value]) => {\r\n            if (value !== undefined) {\r\n                params.append(key, String(value));\r\n            }\r\n        });\r\n        const res = await axiosApplicationJson.get(`/quiz/getDiscoveryQuizzes?${params}`);\r\n        if (res.status === 200 && res.data) {\r\n            return res.data.data;\r\n        }\r\n        return [];\r\n    } catch (err) {\r\n        throw new Error(err.response.data);\r\n    }\r\n};\r\nexport const getQuizzesBySlugs = async (data) => {\r\n    const { slugs } = data;\r\n    if (!slugs || slugs.length === 0) throw new Error('Slugs are required');\r\n    const query = encodeURIComponent(JSON.stringify(slugs));\r\n    const res = await axiosCredentials.get(`/quiz/getQuizzesBySlugs?slugs=${query}`);\r\n    if (res.status === 200) {\r\n        return res.data.data;\r\n    }\r\n    return [];\r\n};\r\n"],"names":["LoadingComponent","_jsx","className","children","ClockLoader","color","colors","primary","size","Timer","_ref","setIsTimeout","endTime","Date","setHours","getHours","seconds","minutes","hours","useTimer","expiryTimestamp","onExpire","_jsxs","toString","padStart","memo","TakeQuizContext","createContext","ANSWER_CHOICE_ACTION","answerChoiceReducer","state","action","type","payload","currentPartIndex","currentQuestionIndex","chooseIndex","isCorrect","undefined","choices","Array","isArray","some","choice","checkQuestionCorrectQuestionType2","quizDetail","answerChoices","currentQuestionType","quiz","questions","answers","countAnswerCorrectInQuizDetail","forEach","answer","countAnswerCorrectInAnswerChoices","everyCorrect","every","TakeQuizProvider","_ref3","slug","useParams","queryQuizDetail","useQuery","queryKey","queryFn","QuizService","timePass","setTimePass","useState","isEnded","setIsEnded","isTimeout","setCurrentPartIndex","setCurrentQuestionIndex","dispatchAnswerChoices","useReducer","setCurrentQuestionType","countAnswerChoices","setCountAnswerChoices","countQuestionQuizDetail","setCountQuestionQuizDetail","useEffect","_queryQuizDetail$data","_queryQuizDetail$data2","_queryQuizDetail$data3","_queryQuizDetail$data4","_queryQuizDetail$data5","_queryQuizDetail$data6","data","questionType","reduce","accumulator","partDetail","length","count","Object","entries","_ref4","keyOfPart","valueOfPart","isError","message","error","_quiz$currentPartInde","_queryQuizDetail$data7","_quiz$currentPartInde2","Provider","value","isLoading","_Fragment","TakeQuizInfo","_quizDetail$quiz2","navigate","useNavigate","useContext","name","Select","onChange","e","defaultValue","Option","onClick","handleBack","map","part","index","_quizDetail$quiz$inde","_quizDetail$quiz$inde2","partIndex","FontAwesomeIcon","icon","faBookOpen","partName","keys","ChooseAnswer","NextQuestion","timeoutId","setTimeout","clearTimeout","_quizDetail$quiz$curr7","_quizDetail$quiz$curr8","_quizDetail$quiz$curr9","_quizDetail$quiz$curr10","_quizDetail$quiz$curr11","_quizDetail$quiz$curr12","_answerChoices$curren","handleGetIsCorrectAnswer","indexInRenderAnswer","foundChoice","find","handleGetChooseIndexAnswer","Aos","duration","easing","questionTypeContent","HTMLReactParser","questionContent","_answerChoices$curren2","_answerChoices$curren3","_quizDetail$quiz$curr","_quizDetail$quiz$curr2","_quizDetail$quiz$curr3","_quizDetail$quiz$curr4","_quizDetail$quiz$curr5","_quizDetail$quiz$curr6","handleChooseAnswer","checked","content","TableOfQuestion","_quizDetail$quiz$curr13","question","_answerChoices$curren4","_answerChoices$curren5","Number","TakeQuizPageMain","score","setScore","handleSaveTakeQuizHistory","useMutationHooks","async","_res$data","quizId","res","axiosCredentials","post","JSON","stringify","status","err","_err$response","_err$response$data","Error","response","QuizHistoryService","warning","calculateScore","_quizDetail$quiz","countCorrectAnswer","keyPart","_ref2","keyQuestion","valueQuestion","countCorrectAnswerQuizDetail","Math","ceil","mutate","id","isPending","Link","to","router","discover","Lottie","animationData","congratsAnimation","TakeQuizPage","axios","create","baseURL","process","withCredentials","headers","getQuizzes","get","_res$data$data","ms","Promise","resolve","getQuizDetail","createQuiz","description","school","subject","topic","schoolYear","educationLevel","thumb","createQuestion","put","updateQuizGeneralInfo","updateQuizQuestion","console","log","getQuizPreviewBySlug","axiosApplicationJson","getQuizForExamBySlug","deleteQuiz","delete","getDiscoveryQuizzes","page","limit","params","URLSearchParams","key","append","String"],"sourceRoot":""}